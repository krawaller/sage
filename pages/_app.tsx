// File generated by Sage, do not edit!

import React from "react";
import { AppProps } from "next/app";
import Head from "next/head";
import {
  SageLinkMapContext,
  SageResourceContext,
} from "../sage/components/contexts";
import type { SageLink } from "../sage/processSource/processTypes";
import type { SageComponent } from "../sage/components";
import Shell from "../sage/components/Shell"; // Controlled via sage.config

const SageApp = (props: AppProps) => {
  const { Component: NextComponent, pageProps } = props;
  const Component = NextComponent as unknown as SageComponent;
  const { resource } = Component;
  return (
    <SageLinkMapContext.Provider value={sageLinkMap}>
      <SageResourceContext.Provider value={resource}>
        {resource && (
          <>
            <Head>
              <title>{sageLinkMap[resource.id].short}</title>
              <meta charSet="utf-8" />
              <meta
                name="viewport"
                content="initial-scale=1.0, width=device-width"
              />
            </Head>
            <Shell linkMap={sageLinkMap} resource={resource}>
              <Component
                {...pageProps}
                resource={resource}
                linkMap={sageLinkMap}
              />
            </Shell>
          </>
        )}
      </SageResourceContext.Provider>
    </SageLinkMapContext.Provider>
  );
};

export default SageApp;

// Generated from source folder
const sageLinkMap: Record<string, SageLink> = {
  root: {
    type: "root",
    kind: "folder",
    path: "/",
    short: "root",
  },
  "code.foo.ts": {
    type: "file",
    kind: "code",
    path: "/code_foo_ts",
    short: "FooCode",
  },
  hurp: {
    type: "folder",
    kind: "folder",
    path: "/hurp",
    short: "hurp",
  },
  "graph.fnerp.dot": {
    type: "file",
    kind: "graph",
    path: "/hurp_graph_fnerp_dot",
    short: "fnerp",
  },
  "markdown.meep.md": {
    type: "file",
    kind: "markdown",
    path: "/hurp_markdown_meep_md",
    short: "meep",
  },
};
